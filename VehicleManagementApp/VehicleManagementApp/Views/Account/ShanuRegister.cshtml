@model VehicleManagementApp.Models.ShanuRegisterViewModel
@{
    ViewBag.Title = "Register";
    var departments = ViewBag.Departments;
    var divisions = ViewBag.Divisions;

}

<h2>@ViewBag.Title.</h2>

@using (Html.BeginForm("ShanuRegister", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a new account.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })

    <div class="form-horizontal">

        @if (TempData["msg"] != null)
        {
            <div class="alert alert-info">
                @TempData["msg"]
            </div>
        }
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div id="tabs" class="col-md-12">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#tabs-3">Personal Information</a></li>
                <li><a href="#tabs-2">Official Information</a></li>
                <li><a href="#tabs-1">Present Address</a></li>

            </ul>
            <br/>
            <br/>
            <div id="tabs-3">
                <div class="row">
                    <div class="col-md-6">
                        <div class="jumbotron">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-md-2"})
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                                    @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new {@class = "control-label col-md-2"})
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Email, new {htmlAttributes = new {@class = "form-control"}})
                                    @Html.ValidationMessageFor(model => model.Email, "", new {@class = "text-danger"})
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new {@class = "control-label col-md-2"})
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ContactNo, new {htmlAttributes = new {@class = "form-control"}})
                                    @Html.ValidationMessageFor(model => model.ContactNo, "", new {@class = "text-danger"})
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">

                        <div class="form-group">
                            @Html.Label("Photo", htmlAttributes: new {@class = "control-label col-md-2"})
                            <div id="imgPreview" class="thumbnail" style="display: block">
                                <img class="img-responsive" id="targetImg" style="height: 300px; width: 350px"/>
                                <div class="caption">
                                    <a href="#" onclick="ClearPreview()"><i class="glyphicon glyphicon-trash"></i></a>
                                    <span id="description"></span>
                                </div>
                                @*<a href="#" class="btn btn-default" onclick="Uploadimage()">Upload</a>*@
                            </div>
                            <br/>
                            <div class="btn btn-primary ">
                                <div class="col-md-10">
                                    <input type="file" id="imageBrowes"/>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.UserPhoto, new {@class = "col-md-2 control-label"})
                                <div class="col-md-10">

                                    <input type="file" name="UserPhoto" id="fileUpload" accept=".png,.jpg,.jpeg,.gif,.tif"/>

                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div id="tabs-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.DepartmentId, new SelectList(departments, "Id", "Name"), "Select Department", new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.DepartmentId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DesignationId, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.DesignationId, null, new {@class = "form-control"})

                        @Html.ValidationMessageFor(model => model.DesignationId, "", new {@class = "text-danger"})


                    </div>
                </div>
            </div>
            <div id="tabs-1">
                <div class="jumbotron">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DivisionId, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.DivisionId, new SelectList(divisions, "Id", "Name"), "Select Division", new {@class = "form-control", id = "DivisionDD2"})
                            @Html.ValidationMessageFor(model => model.DivisionId, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DistrictId, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @*@Html.DropDownListFor(model => model.DistrictId, new SelectList(Model.Districts, "Id", "Name"), "Select Designation", new { @class = "form-control", id = "DistrictDD1" })*@
                            @Html.DropDownList("DistrictId", null, new {@class = "form-control", id = "DistrictDD2"})
                            @Html.ValidationMessageFor(model => model.DistrictId, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ThanaId, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @*@Html.DropDownListFor(model => model.ThanaId, new SelectList(Model.Thanas, "Id", "Name"), "Select Designation", new { @class = "form-control", id="thanaDD1" })*@
                            @Html.DropDownList("ThanaId", null, new {@class = "form-control", id = "thanaDD2"})
                            @Html.ValidationMessageFor(model => model.ThanaId, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">Address</label>
                        @*@Html.LabelFor(model => model.Address, htmlAttributes: new {@class = "control-label col-md-2"})*@
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address1, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.Address1, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>

                @*<div class="form-group">
                        <label class="control-label col-md-2">Address Line 2</label>
                        @Html.LabelFor(model => model.Address, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                @*</div>*@


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" class="btn btn-default" value="Register"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
        }

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
            <script src="~/js/jquery-ui.js"></script>
            <script>
                $(document).ready(function () {
                    $(document).ready(function () {
                        debugger;
                        $("#DepartmentId").change(function () {
                            var selectedDepartmentId = $("#DepartmentId").val();
                            var jsonData = { departmentId: selectedDepartmentId };

                            $.ajax(
                            {
                                url: "/Designation/GetByDepartments",
                                data: jsonData,
                                type: "POST",
                                success: function (response) {
                                    $("#DesignationId").empty();
                                    var options = "<option >Select...</option>";
                                    $.each(response,
                                        function (key, designation) {
                                            options += "<option value='" + designation.Id + "'>" + designation.Name + "</option>";
                                        });

                                    $("#DesignationId").append(options);

                                },
                                error: function (response) {

                                }

                            });
                        });
                    });
                    // permanent address
                    $("#DivisionDD1").change(function () {
                        var permanentDivisionId = $("#DivisionDD1").val();
                        var permanentTargetId = "#DistrictDD1";
                        GetPermanentDistrictAndBind(permanentDivisionId, permanentTargetId);
                    });

                    //permanent thana
                    $("#DistrictDD1").change(function () {
                        var permanentDistrictId = $("#DistrictDD1").val();
                        var permanentTargetId = "#thanaDD1";
                        GetPermanentThanaAndBind(permanentDistrictId, permanentTargetId);
                    });

                    // present address
                    $("#DivisionDD2").change(function () {
                        var selectedDivisionId = $("#DivisionDD2").val();
                        var targetid = "#DistrictDD2";
                        GetDistrictAndBind(selectedDivisionId, targetid);

                    });


                    // thana present
                    $("#DistrictDD2").change(function () {
                        var selectedthanaId = $("#DistrictDD2").val();
                        var targetid = "#thanaDD2";
                        GetThanaAndBind(selectedthanaId, targetid);
                    });

                });

                //permanent
                function GetPermanentDistrictAndBind(permanentDivisionId, permanentTargetId) {

                    var jsonData = { divisionId: permanentDivisionId };
                    $.ajax({
                        url: "/district/GetByDivision",
                        data: jsonData,
                        type: "POST",
                        success: function (response) {
                            $(permanentTargetId).empty();

                            var options = "<option>Select.....</option>";
                            $.each(response,
                                function (key, district) {
                                    options += "<option value='" + district.Id + "'>" + district.Name + "</option>";
                                });
                            $(permanentTargetId).append(options);
                        },
                        error: function (response) {

                        }
                    });
                }

                function GetPermanentThanaAndBind(permanentDistrictId, permanentTargetId) {

                    var jsonData = { districtId: permanentDistrictId };
                    $.ajax({
                        url: "/Thana/GetByDistrict",
                        data: jsonData,
                        type: "POST",
                        success: function (response) {
                            $(permanentTargetId).empty();
                            var options = "<option>Select.....</option>";
                            $.each(response,
                                function (key, thana) {
                                    options += "<option value='" + thana.Id + "'>" + thana.Name + "</option>";
                                });
                            $(permanentTargetId).append(options);
                        },
                        error: function (response) {

                        }
                    });
                }

                function GetDistrictAndBind(selectedDivisionId, targetid) {

                    var jsonData = { divisionId: selectedDivisionId };
                    $.ajax({
                        url: "/district/GetByDivision",
                        data: jsonData,
                        type: "POST",
                        success: function (response) {
                            $(targetid).empty();

                            var options = "<option>Select.....</option>";
                            $.each(response,
                                function (key, district) {
                                    options += "<option value='" + district.Id + "'>" + district.Name + "</option>";
                                });
                            $(targetid).append(options);
                        },
                        error: function (response) {

                        }
                    });
                }

                function GetThanaAndBind(selectedDivisionId, targetid) {

                    var jsonData = { districtId: selectedDivisionId };
                    $.ajax({
                        url: "/Thana/GetByDistrict",
                        data: jsonData,
                        type: "POST",
                        success: function (response) {
                            $(targetid).empty();

                            var options = "<option>Select.....</option>";
                            $.each(response,
                                function (key, district) {
                                    options += "<option value='" + district.Id + "'>" + district.Name + "</option>";
                                });
                            $(targetid).append(options);
                        },
                        error: function (response) {

                        }
                    });
                }

            </script>
            <script type="text/javascript">

                $(function () {

                    $("#tabs").tabs({
                        //collapsible: true

                    });

                });


                $(".nav li").on("click", function () {
                    $(".nav li").removeClass("active");
                    $(this).addClass("active");
                });
            </script>
            <script type="text/javascript">

                $(document).ready(function () {

                    $("#imageBrowes").change(function () {

                        var file = this.files;

                        if (file && file[0]) {
                            ReadImage(file[0]);
                        }

                    });
                });


                var ReadImage = function (file) {

                    var reader = new FileReader;
                    var image = new Image;

                    reader.readAsDataURL(file);
                    reader.onload = function (_file) {

                        image.src = _file.target.result;
                        image.onload = function () {

                            var height = this.height;
                            var width = this.width;
                            var type = file.type;
                            var size = ~~(file.size / 1024) + "KB";

                            $("#targetImg").attr('src', _file.target.result);
                            $("#description").text("Size:" + size + ", " + height + "X " + width + ", " + type + "");
                            $("#imgPreview").show();

                        };
                    };
                };
                var ClearPreview = function () {
                    $("#imageBrowes").val('');
                    $("#description").text('');
                    $("#imgPreview").hide();

                };
            </script>
        }

