@model VehicleManagementApp.ViewModels.DriverViewModel
@{
    ViewBag.Title = "Added";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container">
    <h1 style="text-align: center;">Driver Added Page</h1>
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new {@class = "text-danger"})

                    <div class="jumbotron">

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsDriver, new {@checked = "checked",id="isDrivertrue"})
                                    @Html.LabelFor(m => m.IsDriver)
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new {@class = "control-label col-md-2"})<span class="important">*</span>
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.DepartmentId, new SelectList(Model.Departments, "Id", "Name"), "Select Department", new {@class = "form-control"})
                                @Html.ValidationMessageFor(model => model.DepartmentId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DesignationId, htmlAttributes: new {@class = "control-label col-md-2"})<span class="important">*</span>
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.DesignationId, new SelectList(Model.Designations, "Id", "Name"), "Select Designation", new {@class = "form-control"})
                                @Html.ValidationMessageFor(model => model.DesignationId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-md-2"})<span class="important">*</span>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ContactNo, htmlAttributes: new {@class = "control-label col-md-2"})<span class="important">*</span>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ContactNo, new {htmlAttributes = new {@class = "form-control"}})
                                @Html.ValidationMessageFor(model => model.ContactNo, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Email, new {htmlAttributes = new {@class = "form-control"}})
                                @Html.ValidationMessageFor(model => model.Email, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.LicenceNo, htmlAttributes: new {@class = "control-label col-md-2"})<span class="important">*</span>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LicenceNo, new {htmlAttributes = new {@class = "form-control"}})
                                @Html.ValidationMessageFor(model => model.LicenceNo, "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>

                    <h3><strong>Permanent Address</strong>
                    </h3>
                    <div class="jumbotron">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DivisionId, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.DivisionId, new SelectList(Model.Divisions, "Id", "Name"), "Select Division", new {@class = "form-control", id = "DivisionDD1"})
                                @Html.ValidationMessageFor(model => model.DivisionId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DistrictId, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @*@Html.DropDownListFor(model => model.DistrictId, new SelectList(Model.Districts, "Id", "Name"), "Select Designation", new { @class = "form-control", id = "DistrictDD1" })*@
                                @Html.DropDownList("DistrictId", null, new {@class = "form-control", id = "DistrictDD1"})
                                @Html.ValidationMessageFor(model => model.DistrictId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ThanaId, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @*@Html.DropDownListFor(model => model.ThanaId, new SelectList(Model.Thanas, "Id", "Name"), "Select Designation", new { @class = "form-control", id="thanaDD1" })*@
                                @Html.DropDownList("ThanaId", null, new {@class = "form-control", id = "thanaDD1"})
                                @Html.ValidationMessageFor(model => model.ThanaId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Address Details</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Address1, new {htmlAttributes = new {@class = "form-control", id = "addressDetails"}})
                                @Html.ValidationMessageFor(model => model.Address1, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        @*<div class="form-group">
                            <label class="control-label col-md-2">Address Line 2</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                            </div>
                        </div>*@
                    </div>

                    <h3><strong>Present Address</strong>
                    </h3>
                    <div class="jumbotron">
                        <h3>&nbsp;&nbsp;<input type="checkbox" id="whencheckassame"/>&nbsp;&nbsp;Same as above
                        </h3>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DivisionId, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.DivisionId, new SelectList(Model.Divisions, "Id", "Name"), "Select Division", new {@class = "form-control", id = "DivisionDD2"})
                                @Html.ValidationMessageFor(model => model.DivisionId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DistrictId, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @*@Html.DropDownListFor(model => model.DistrictId, new SelectList(Model.Districts, "Id", "Name"), "Select Designation", new { @class = "form-control", id = "DistrictDD1" })*@
                                @Html.DropDownList("DistrictId", null, new {@class = "form-control", id = "DistrictDD2"})
                                @Html.ValidationMessageFor(model => model.DistrictId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ThanaId, htmlAttributes: new {@class = "control-label col-md-2"})
                            <div class="col-md-10">
                                @*@Html.DropDownListFor(model => model.ThanaId, new SelectList(Model.Thanas, "Id", "Name"), "Select Designation", new { @class = "form-control", id="thanaDD1" })*@
                                @Html.DropDownList("ThanaId", null, new {@class = "form-control", id = "thanaDD2"})
                                @Html.ValidationMessageFor(model => model.ThanaId, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Address Details</label>
                            @*@Html.LabelFor(model => model.Address, htmlAttributes: new {@class = "control-label col-md-2"})*@
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Address1, new {htmlAttributes = new {@class = "form-control", id = "addressDetails01"}})
                                @Html.ValidationMessageFor(model => model.Address1, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        @*<div class="form-group">
                            <label class="control-label col-md-2">Address Line 2</label>*@
                        @*@Html.LabelFor(model => model.Address, htmlAttributes: new {@class = "control-label col-md-2"})*@
                        @*<div class="col-md-10">
                                @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                            </div>
                        </div>*@
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Added Driver" class="btn btn-primary" style="float: right;"/>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts{
    <script>
        $(document).ready(function () {

            //if ($("#isDrivertrue").is(":checked")) {
            //    $("#isDrivertrue").attr("disabled", "disabled");
            //} else {
            //    $("#isDrivertrue").attr("disabled", false);
            //}

            //Permanent to Present Address Same As copy
            $("#whencheckassame").on("click", function () {

                var division = $("#DivisionDD1").val();
                var distric = $("#DistrictDD1").val();
                var thana = $("#thanaDD1").val();

                if ($(this).is(":checked")) {

                    $("#DivisionDD2").val(division);
                    $("#DivisionDD2").trigger("change");
                    $("#DistrictDD2").val(distric);
                    $("#DistrictDD2").trigger("change");
                    $("#thanaDD2").val(thana);
                    $("#addressDetails01").val($("#addressDetails").val()).prop("disabled", true);

                    $("#DivisionDD2").attr("disabled", "disabled");
                    $("#DistrictDD2").attr("disabled", "disabled");
                    $("#thanaDD2").attr("disabled", "disabled");


                } else {
                    document.getElementById("DivisionDD2").selectedIndex = "";
                    document.getElementById("DistrictDD2").selectedIndex = "";
                    document.getElementById("thanaDD2").selectedIndex = "";

                    $("#DivisionDD2").attr("disabled", false);
                    $("#DistrictDD2").attr("disabled", false);
                    $("#thanaDD2").attr("disabled", false);

                    $("#addressDetails01").val('').prop("disabled", false);

                }
            });

            // permanent address
            $("#DivisionDD1").change(function () {
                var permanentDivisionId = $("#DivisionDD1").val();
                var permanentTargetId = "#DistrictDD1";
                GetPermanentDistrictAndBind(permanentDivisionId, permanentTargetId);
            });

            //permanent thana
            $("#DistrictDD1").change(function () {
                var permanentDistrictId = $("#DistrictDD1").val();
                var permanentTargetId = "#thanaDD1";
                GetPermanentThanaAndBind(permanentDistrictId, permanentTargetId);
            });

            // present address
            $("#DivisionDD2").change(function () {
                var selectedDivisionId = $("#DivisionDD2").val();
                var targetid = "#DistrictDD2";
                GetDistrictAndBind(selectedDivisionId, targetid);

            });


            // thana present
            $("#DistrictDD2").change(function() {
                var selectedthanaId = $("#DistrictDD2").val();
                var targetid = "#thanaDD2";
                GetThanaAndBind(selectedthanaId, targetid);
            });

        });
        debugger;
        
        //permanent
        function GetPermanentDistrictAndBind(permanentDivisionId, permanentTargetId) {

            var jsonData = { divisionId: permanentDivisionId };
            $.ajax({
                url: "/district/GetByDivision",
                data: jsonData,
                type: "POST",
                async: false,
                success: function (response) {
                    $(permanentTargetId).empty();

                    var options = "<option>Select.....</option>";
                    $.each(response,
                        function (key, district) {
                            options += "<option value='" + district.Id + "'>" + district.Name + "</option>";
                        });
                    $(permanentTargetId).append(options);
                },
                error: function (response) {

                }
            });
        }

        function GetPermanentThanaAndBind(permanentDistrictId, permanentTargetId) {

            var jsonData = { districtId: permanentDistrictId };
            $.ajax({
                url: "/Thana/GetByDistrict",
                data: jsonData,
                type: "POST",
                async: false,
                success: function (response) {
                    $(permanentTargetId).empty();
                    var options = "<option>Select.....</option>";
                    $.each(response,
                        function (key, thana) {
                            options += "<option value='" + thana.Id + "'>" + thana.Name + "</option>";
                        });
                    $(permanentTargetId).append(options);
                },
                error: function (response) {

                }
            });
        }

        function GetDistrictAndBind(selectedDivisionId, targetid) {

            var jsonData = { divisionId: selectedDivisionId };
            $.ajax({
                url: "/district/GetByDivision",
                data: jsonData,
                type: "POST",
                async: false,
                success: function(response) {
                    $(targetid).empty();

                    var options = "<option>Select.....</option>";
                    $.each(response,
                        function(key, district) {
                            options += "<option value='" + district.Id + "'>" + district.Name + "</option>";
                        });
                    $(targetid).append(options);
                },
                error: function(response) {

                }
            });
        }

        function GetThanaAndBind(selectedDivisionId, targetid) {

            var jsonData = { districtId: selectedDivisionId };
            $.ajax({
                url: "/Thana/GetByDistrict",
                data: jsonData,
                type: "POST",
                async: false,
                success: function (response) {
                    $(targetid).empty();

                    var options = "<option>Select.....</option>";
                    $.each(response,
                        function (key, district) {
                            options += "<option value='" + district.Id + "'>" + district.Name + "</option>";
                        });
                    $(targetid).append(options);
                },
                error: function (response) {

                }
            });
        }

    </script>
}
