@model VehicleManagementApp.ViewModels.MyRequsitionCreateViewModel

@{
    ViewBag.Title = "Requisition";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var employees = ViewBag.Employees;
    // var result = ViewBag.Result;
}



@using (Html.BeginForm("MyRequisitionList", "Requsition", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="container" style="margin-top: 3%">
        <a href="#" class="btn btn-info" onclick="AddNewRequisition()">Add New Requisition</a> <br /><br />

        <div class="modal fade " id="MyModal">
            <div class="modal-dialog modal-lg" style="width:80%;">

                <div class="modal-content">
                    <div class="modal-header" style="text-align: center; color: #6a5acd; background-color: #b0e0e6; border-top-left-radius: 5px; border-top-right-radius: 5px;">
                        <h3 id="ModalTitle">Add New Requisition</h3>
                        <button href="#" class="close" data-dismiss="modal">&times;</button>

                    </div>
                    <div class="modal-body">
                        @*<form id="rquisitionForm">*@
                            <fieldset id="SubmitForm">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.RequestType, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.DropDownListFor(model => model.RequestType, new SelectList(Model.RequestTypes, "Text", "Text"), new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.RequestType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.Form, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.Form, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Form, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.To, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.To, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.TextAreaFor(model => model.Description, 3, 20, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.JourneyStartDate, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.JourneyStartDate, new { htmlAttributes = new { @class = "form-control datePicker" } })
                                            @Html.ValidationMessageFor(model => model.JourneyStartDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.JourneyStartTime, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.JourneyStartTime, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.JourneyStartTime, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.JouneyEndDate, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.JouneyEndDate, new { htmlAttributes = new { @class = "form-control datePicker" } })
                                            @Html.ValidationMessageFor(model => model.JouneyEndDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.JouneyEndTime, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.JouneyEndTime, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.JouneyEndTime, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.RequestForOther, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7 ">
                                            <div class="checkbox">
                                                @Html.EditorFor(model => model.RequestForOther)
                                                @Html.ValidationMessageFor(model => model.RequestForOther, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" id="EmployeeDiv">
                                    <div class="row col-md-12">
                                        @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-7">
                                            @Html.DropDownListFor(model => model.EmployeeId, new SelectList(employees, "Id", "Name"), "--Select Employee--", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <br />
                                <br />
                                <div class="form-group">
                                    <div class="col-md-offset-4 col-md-4" style="float: right">
                                        <input type="submit" value="Submit" class="btn btn-block btn-primary" />
                                    </div>
                                </div>
                            </fieldset>
                        @*</form>*@
                    </div>
                </div>
            </div>
        </div>
    </div>


}

<div>
    @if (TempData["msg"] != null)
    {
        <div class="alert alert-info">
            @TempData["msg"]
        </div>
    }
</div>

<div class="alert alert-success" id="resultDiv">

</div>




<h3 style="text-align: center"> All Requisitions</h3>
<div id="requisitionListDiv">
    @Html.Partial("_MyRequisitionListPartial", Model.RequsitionViewModels)

</div>


@section scripts{
    <script type="text/javascript">

        // Requsition Validation Check start
        $(document).ready(function () {

            $("#JouneyEndDate").change(function () {

                var startDate = $("#JourneyStartDate").val();
                var endDate = $("#JouneyEndDate").val();

                if (startDate > endDate) {
                    alert("End Date Should Be bigger than Start Date");
                    return;
                }

            });

        });
        // Requsition Validation Check end


        $('#myPartialTable').DataTable();


    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("#EmployeeDiv").hide();
            $("#resultDiv").hide();
            //$("").datepicker({
            //    minDate: 0
            //});


            //$(".form-group").css({ "padding-bottom": "35px" });

        });
        //$("#RequestForOther").change(function() {
        //    debugger;

        //$(".form-group").css({ "padding-bottom": "35px" });
        //});

        $("#RequestForOther").change(function () {


            if ($("#RequestForOther").is(":checked")) {
                $("#EmployeeDiv").show();
                $("#EmployeeId").addClass(required = true);


            } else {
                $("#EmployeeDiv").hide();
                $("#EmployeeId").addClass(required = false);


            }
        });

    </script>
    <script>
        //debugger;
        //$(function() {
        //    var dates = $("#JourneyStartDate , #JouneyEndDate").datepicker({
        //        defaultDate: "+1w",
        //        changeMonth: true,
        //        numberOfMonths: 1,
        //        minDate : 0,
        //        maxDate : "+3Y",
        //        onSelect: function( selectedDate ) {
        //            var option = this.id == "JourneyStartDate" ? "minDate" : "maxDate",
        //                instance = $( this ).data( "datepicker" );
        //            date = $.datepicker.parseDate(
        //                instance.settings.dateFormat ||
        //                $.datepicker._defaults.dateFormat,
        //                selectedDate, instance.settings );
        //            dates.not( this ).datepicker( "option", option, date );
        //        }
        //    });
        //});

    </script>

    <script>

        function AddNewRequisition() {

            $("#rquisitionForm").load();

            $("#EmployeeId option:selected").text("--Select Employee--");

            $("#MyModal").modal();

        }


        //$(function () {
        //    $(".datetimepicker").datetimepicker();
        //});
        @*$("#AddRequisition").on("click", function () {
            debugger;

            var data = $("#SubmitForm").serialize();
            $.ajax({
                type: "Post",
                url: "/Requsition/MyJsonCreate",
                data: data,
                //datatype: "json",
                //contenttype: 'application/json; charset=utf-8',
                //async: true,
                success: function (result) {
                    debugger;

                    $("#MyModal").modal("hide");
                    $("#resultDiv").show();
                    $("#resultDiv").html(result);
                    $("#requisitionListDiv").load('@(Url.Action("MyRequestList", "Requsition"))');
                    //$('#myPartialTable').DataTable();
                    //$('.table').DataTable();
                    //$('#myTable').DataTable();

                },
                error: function () {

                }
            });
        });*@
    </script>
}
